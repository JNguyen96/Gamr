package edu.ucsb.cs.cs184.gaucho.gamr;

/**
 * Created by Justin on 12/14/17.
 */

import android.app.FragmentManager;
import android.content.Intent;
import android.graphics.Color;
import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.CardView;
import android.support.v7.widget.RecyclerView;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;

import android.app.FragmentManager;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.azoft.carousellayoutmanager.CarouselLayoutManager;
import com.azoft.carousellayoutmanager.CarouselZoomPostLayoutListener;
import com.azoft.carousellayoutmanager.CenterScrollListener;
import com.facebook.AccessToken;
import com.ramotion.cardslider.CardSliderLayoutManager;
import com.ramotion.cardslider.CardSnapHelper;

import java.util.List;
import java.util.Random;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

/**
 * Created by Justin on 12/9/17.
 */

public class Slides extends AppCompatActivity {

    public int currentHolderPos = 0;
    Lock arrayLock;
    private CopyOnWriteArrayList<String> titles;
    private CopyOnWriteArrayList<String> descriptions;
    private CopyOnWriteArrayList<String> ids;
    public static RecyclerView recyclerView;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_slides);
        titles = new CopyOnWriteArrayList<>();
        descriptions = new CopyOnWriteArrayList<>();
        ids = new CopyOnWriteArrayList<>();
        arrayLock = new ReentrantLock();
        final CarouselLayoutManager layoutManager = new CarouselLayoutManager(CarouselLayoutManager.HORIZONTAL, false);
        layoutManager.setPostLayoutListener(new CarouselZoomPostLayoutListener());
        refreshItems();
        recyclerView = (RecyclerView) findViewById(R.id.recycler_view);
        recyclerView.setLayoutManager(layoutManager);
        recyclerView.setHasFixedSize(true);
        layoutManager.addOnItemSelectionListener(new CarouselLayoutManager.OnCenterItemSelectionListener() {
            @Override
            public void onCenterItemChanged(int adapterPosition) {
                currentHolderPos = adapterPosition;
            }
        });
        recyclerView.addOnScrollListener(new CenterScrollListener());
        recyclerView.setAdapter(new TestAdapter(titles, descriptions));
    }

    private void refreshItems() {
        arrayLock.lock();
        titles.clear();
        descriptions.clear();
        ids.clear();
        arrayLock.unlock();
        DBWrapper.getInstance().getUser(AccessToken.getCurrentAccessToken().getUserId(), new DBWrapper.UserTransactionListener() {
            @Override
            public void onComplete(User user) {
                for (String sale : user.getSaleIds()) {
                    DBWrapper.getInstance().getSale(sale, new DBWrapper.SaleTransactionListener() {
                        @Override
                        public void onComplete(Sale sale) {
                            arrayLock.lock();
                            titles.add(sale.name);
                            descriptions.add(sale.description);
                            ids.add(sale.id);
                            arrayLock.unlock();
                            recyclerView.getAdapter().notifyDataSetChanged();
                        }

                        @Override
                        public void onFailure(FailureReason reason) {

                        }
                    });
                }
            }
        });
    }
    private final class TestAdapter extends RecyclerView.Adapter<Slides.TestViewHolder> {
        private List<String> titles;
        private List<String> descriptions;
        TestAdapter(List<String> titles, List<String> descriptions) {
            this.titles = titles;
            this.descriptions = descriptions;
        }

        @Override
        public TestViewHolder onCreateViewHolder(final ViewGroup parent, final int viewType) {
            CardView cv = (CardView) LayoutInflater.from(parent.getContext()).inflate(R.layout.card_view,parent,false);
            final TestViewHolder tvh = new TestViewHolder(cv);
            return tvh;
        }

        @Override
        public void onBindViewHolder(final TestViewHolder holder, final int position) {
            holder.title.setText(titles.get(position));
            holder.desc.setText(descriptions.get(position));
            currentHolderPos = holder.getAdapterPosition();
        }

        @Override
        public int getItemCount() {
            return titles.size();
        }
    }

    private static class TestViewHolder extends RecyclerView.ViewHolder {
        public CardView mCardView;
        public TextView title;
        public TextView desc;
        public ImageView img;
        public TestViewHolder(CardView cv){
            super(cv);
            mCardView = cv;
            title = (TextView)cv.findViewById(R.id.textView);
            desc = (TextView)cv.findViewById(R.id.textView2);
            img = (ImageView)cv.findViewById(R.id.imageView);
        }

    }

    @Override
    public boolean onPrepareOptionsMenu(final Menu menu) {
        getMenuInflater().inflate(R.menu.edit_menu, menu);

        return super.onCreateOptionsMenu(menu);
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item){
        switch (item.getItemId()) {

            case  R.id.action_done:
                startActivity(new Intent(Slides.this, ProfileActivity.class));
                return true;

            case R.id.action_edit:
                FragmentManager fm = (FragmentManager)getFragmentManager();
                Log.d("ARRAY POS", currentHolderPos + "");
<<<<<<< HEAD:app/src/main/java/edu/ucsb/cs/cs184/gaucho/gamr/Slides.java~
<<<<<<< HEAD
                AddFragment addFragment = AddFragment.newInstance("","","Change Image");//titles[currentHolderPos], desciptions[currentHolderPos], "Change Image");
=======
                AddFragment addFragment = AddFragment.newInstance(titles[currentHolderPos], desciptions[currentHolderPos], "Change Image", null);
>>>>>>> b21675c6fe194bdcc03c67c3b9ad8f91bf51dfc2
=======
                arrayLock.lock();
                AddFragment addFragment = AddFragment.newInstance(titles.get(currentHolderPos), descriptions.get(currentHolderPos) ,"Change Image", ids.get(currentHolderPos));
                arrayLock.unlock();
>>>>>>> 3319b8bef74a75b30f137659e9ae94ab3e2901cd:app/src/main/java/edu/ucsb/cs/cs184/gaucho/gamr/Slides.java
                addFragment.show(fm, "new edit game");

                return true;

            default:
                // If we got here, the user's action was not recognized.
                // Invoke the superclass to handle it.
                return super.onOptionsItemSelected(item);
        }
    }
}
